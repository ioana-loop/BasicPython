{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework 2 - Logistic Regression \n",
    "This homework will go over Logistic Regression ROC and AUC, and the RFECV function. There will also be a bonus question not really related to Logistic Regression but kind of, I think it will be a good challenge. The data we are using is the csv named 'surfs_up.csv'. This data has seven columns of data long with a binary classification. Each column represents a certain attribute of the days conditions, and the binary classification is whether it is a good day to surf or not (subjectively picked by the person who made the dataset). The columns, in order of appearance, are as follows:\n",
    "\n",
    "Air Temperature, in Fahrenheit\n",
    "\n",
    "\n",
    "Wind Gust, in meters per second\n",
    "\n",
    "\n",
    "Average Wave Period, in seconds\n",
    "\n",
    "\n",
    "Wind Speed, in meters per second\n",
    "\n",
    "\n",
    "Wave Height, in feet\n",
    "\n",
    "\n",
    "Water Temperature, in Fahrenheit\n",
    "\n",
    "\n",
    "Dominant Wave Period, in seconds\n",
    "\n",
    "\n",
    "In the first question I ask you to set the column names, pick column names that are appropriate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import matplotlib.mlab as mlab\n",
    "import scipy.stats as st\n",
    "\n",
    "#Importing Logistic Regression \n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import metrics\n",
    "from scipy.special import expit\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.feature_selection import RFECV\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1 - Get to know the data\n",
    "(a) Load in the data 'surfsup.csv' into a dataframe, and remove the two blank columns. Then, (b) Rename the columns based off of the data description. (c) Report how many of each class there is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2 - An ROC curve from basic threshold classification\n",
    "(a) Create a new variable that is just the Dominant Wave Period column, and also create a response column variable. (b) Create a function that takes in a Series and a threshold, and returns a series of predictions based off of the threshold (1 for above the threshold, 0 for below it). (c) Create a linear range of 10 points in the actual range of the data, run your function on each point as your threshold value, and at each point find the TPR and FPR associated with the threshold. (d) Plot the points as pairs (FPR,TPR), but first sorting by FPR. (e) Repeat part (c) and (d) except for 25 different thresholds in the range."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2 (I would suggest using multiple cells)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 3 - One-Dim Logistic Regression\n",
    "(a) Run a logistic regression on the single column we were using in Q2, using a testsize of 0.3. Create and display the confusion matrix, report the accuracy. (b) Pull the coefficient and intercept out of the model and transform the Series based off of the sigmoid function. Plot the transformed data against the original data, i.e. the series will be the x variable and the transformed data will be the y data. What is a reasonable decision threshold here? (c) Plot the ROC curve for the model and report the AUC."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 4 - More Dimensions\n",
    "(a) Run a Logistic Regression on all of the data, using a test set with test_size = 0.3. Create a confusion matrix for the model's predictions, and report the accuracy, the specificity, and the sensitivity. (b) Run a logistic regression on all of the data once again, this time useing the cross_val_score method. Use cv = 5 and scoring equal to accuracy. Report the average accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 5 - Feature Selection\n",
    "(a) Use the REFCV function with a step of one, five folds of cross validation, and accuracy as your scoring. (b) How many features, and which features were selected? (c) Plot number of features against the accuracy at each step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q5\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bonus (up to +10 on Total Score)\n",
    "Write a function that takes in two series, one is the $X$ data, the other will be the classifications $y$, and returns the best (ish) threshold for classification, and the accuracy associated with that threshold. Any method can be used. Test the code on the column used in Q2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Bonus\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
